if ~exist('ephdata', 'class')
    error('ephdata class not found. Verify file location and MATLAB path.');
end

if ~exist('lambertsolver', 'class')
    error('lambertsolver class not found. Verify file location and MATLAB path.');
end

if ~exist('propagate.m', 'file')
    error('propagate.m not found. Verify file location and MATLAB path.');
end

if ~exist('roundTripSolutions.mat', 'file')
    error('roundTripSolutions.mat not found. Verify file location and MATLAB path.');
end

if ~exist('departureSolutions.mat', 'file')
    error('departureSolutions.mat not found. Verify file location and MATLAB path.');
end

load('DepartureSolutions.mat','solutions');     % Earth->Ast
load('RoundTripSolutions.mat','roundTrips');    % full round trip

mergedTable = mergeDepartureAndReturn(solutions, roundTrips);

entry = mergedTable(1,:);

plotRoundTrip(entry, 1000)


function mergedTable = mergeDepartureAndReturn(departSol, roundTripSol)
% MERGEDEPARTUREANDRETURN
%   Merges Earth->Asteroid solutions ("departSol") with the matching 
%   Asteroid->Earth solutions ("roundTripSol") into a single table.
%
%   Two entries match if:
%       AstID is the same
%       Earth departure times match (rounded)
%       Asteroid arrival times match (rounded)
%
%   The result is a table that has both outbound and return columns.
%
%   If no matches are found, 'mergedTable' is empty.

    if isempty(departSol) || isempty(roundTripSol)
        warning('One of the solution sets is empty. Returning empty table.');
        mergedTable = table();
        return;
    end

    % 1) Convert the struct arrays to tables
    depTab = struct2table(departSol, 'AsArray', true);
    retTab = struct2table(roundTripSol, 'AsArray', true);

    % 2) Rename columns in depTab to clearly indicate "Outbound" data
    %    (so they don't clash with the return columns)
    depTab = renamevars(depTab, ...
        {'Departure','Arrival','ArcType','vInf','dvRendez','TOF_days','v1DepartVec','v2ArriveVec'}, ...
        {'EarthDepartureEpoch','AsteroidArrivalEpoch','DepartureArcType','DepartureVInf','DepartureDV','DepartureTOF','V1DepartVecEarth','V2ArriveVecAsteroid'});

    % 3) Rename columns in retTab to clearly indicate "Return" data
    %    (some fields in roundTripSolutions have similar names)
    retTab = renamevars(retTab, ...
        {'DepartEarth','ArriveAst','DepartAst','ArriveEarth','ArcTypeReturn','vInfReturn','dvAstDep','TOF_daysReturn','v1DepartVec','v2ArriveVec'}, ...
        {'EarthDepartureEpoch','AsteroidArrivalEpoch','AsteroidDepartureEpoch','EarthArrivalEpoch','ReturnArcType','ReturnVInf','ReturnDV','ReturnTOF','V1DepartVecAsteroid','V2ArriveVecEarth'});

    % 4) Create "key" columns in both tables
    %    We'll match by (AstID, OutDeparture=RetDepartEarth, OutArrival=RetArriveAst),
    %    rounding to integer days so they match exactly in join
    depTab.KeyAstID = depTab.AstID;  % same ID field, just clarifying the usage
    depTab.DepEpoch = round(depTab.EarthDepartureEpoch);
    depTab.ArrEpoch = round(depTab.AsteroidArrivalEpoch);

    retTab.KeyAstID = retTab.AstID;
    retTab.DepEpoch = round(retTab.EarthDepartureEpoch);
    retTab.ArrEpoch = round(retTab.AsteroidArrivalEpoch);

    % 5) Perform an inner join using these keys
    %    'MergeKeys' => merges them into single columns
    mergedTable = innerjoin(depTab, retTab, ...
        'LeftKeys',  {'KeyAstID','DepEpoch','ArrEpoch'}, ...
        'RightKeys', {'KeyAstID','DepEpoch','ArrEpoch'}, ...
        'LeftVariables', {
            'AstName','AstID','EarthDepartureEpoch','AsteroidArrivalEpoch','DepartureArcType','DepartureVInf',...
            'DepartureDV','DepartureTOF','V1DepartVecEarth','V2ArriveVecAsteroid'
        }, ...
        'RightVariables', {
            'AsteroidDepartureEpoch','EarthArrivalEpoch','ReturnArcType','ReturnVInf','ReturnDV','ReturnTOF','V1DepartVecAsteroid','V2ArriveVecEarth'
        });


    % The resulting table will have all columns from depTab and retTab
    % for rows that matched on the 3 key columns.

    % 6) Sort by outbound departure for convenience
    if ~isempty(mergedTable)
        mergedTable = sortrows(mergedTable, 'AstID');
    end

    fprintf('Merged table has %d matching round-trip entries.\n', height(mergedTable));
end


function plotRoundTrip(oneRow, nSteps)
% PLOTROUNDTRIPFROMTABLE
%   Plots the Earth->Asteroid->Earth trajectory using a *single row*
%   from your merged solutions table. That row contains columns:
%
%     OutDeparture, OutArrival, OutArcType, OutVInf, ...
%     OutV1DepartVec, OutV2ArriveVec, ...
%     RetDepartEarth, RetArriveAst, RetArcType, ...
%     RetV1DepartVec, RetV2ArriveVec, ...
%     AstID, AstName, (etc.)
%
%   The function does exactly what your previous plotRoundTrip did,
%   but accesses the data from the table row.

    figure; hold on;

    muSun = getAstroConstants('Sun', 'mu');

    %% 1) Outbound Leg (Earth->Asteroid)
    t0_out = oneRow.EarthDepartureEpoch;
    t1_out = oneRow.AsteroidArrivalEpoch;

    % Earth at departure
    [rE0, ~] = EphSS_car(3, t0_out);
    vSC0_out = oneRow.V1DepartVecEarth;  % The Lambert departure velocity in heliocentric frame

    % Propagate
    [timeOut, rSC_out] = propagate(rE0, vSC0_out, t0_out, t1_out, muSun, nSteps);

    % Earth & asteroid positions for each sample time
    rEarth_out = zeros(nSteps,3);
    rAst_out   = zeros(nSteps,3);

    for i = 1:nSteps
        [rE, ~] = EphSS_car(3, timeOut(i));
        [rA, ~] = EphSS_car(oneRow.AstID, timeOut(i));
        rEarth_out(i,:) = rE;
        rAst_out(i,:)   = rA;
    end

    plot3(rSC_out(:,1), rSC_out(:,2), rSC_out(:,3), 'r','LineWidth',2);
    plot3(rEarth_out(:,1), rEarth_out(:,2), rEarth_out(:,3), 'b','LineWidth',1);
    plot3(rAst_out(:,1),   rAst_out(:,2),   rAst_out(:,3),   'g','LineWidth',1);
    
    legend('Outbound SC','Earth','Asteroid','Sun','Location','best');
    %% 2) Return Leg (Asteroid->Earth)
    t0_ret = oneRow.AsteroidDepartureEpoch;
    t1_ret = oneRow.EarthArrivalEpoch;

    % Asteroid at departure
    [rAst0, ~] = EphSS_car(oneRow.AstID, t0_ret);
    vSC0_ret   = oneRow.V1DepartVecAsteroid;  % departure velocity from asteroid in heliocentric

    [timeRet, rSC_ret] = propagate(rAst0, vSC0_ret, t0_ret, t1_ret, muSun, nSteps);

    rEarth_ret = zeros(nSteps,3);
    rAst_ret   = zeros(nSteps,3);

    for i = 1:nSteps
        [rE, ~] = EphSS_car(3, timeRet(i));
        [rA, ~] = EphSS_car(oneRow.AstID, timeRet(i));
        rEarth_ret(i,:) = rE;
        rAst_ret(i,:)   = rA;
    end

    figure; hold on;

    plot3(rSC_ret(:,1), rSC_ret(:,2), rSC_ret(:,3), 'm','LineWidth',2);
    plot3(rEarth_ret(:,1), rEarth_ret(:,2), rEarth_ret(:,3), 'b','LineWidth',1);
    plot3(rAst_ret(:,1),   rAst_ret(:,2),   rAst_ret(:,3),   'g','LineWidth',1);

    % Plot Sun
    plot3(0,0,0,'yo','MarkerFaceColor','y','MarkerSize',8);

    axis equal; grid on;
    xlabel('X [km]'); ylabel('Y [km]'); zlabel('Z [km]');

    % If your merged table has the AstName column from the departure solutions:
    if isfield(oneRow,'AstName')
        missionTitle = sprintf('Round Trip: %s (Earth->Ast->Earth)', oneRow.AstName);
    else
        missionTitle = 'Round Trip: Earth->Asteroid->Earth';
    end

    title(missionTitle);

    legend('Outbound SC','Earth','Asteroid','Sun','Location','best');
end

